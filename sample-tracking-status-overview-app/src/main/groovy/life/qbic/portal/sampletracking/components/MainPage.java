package life.qbic.portal.sampletracking.components;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.annotations.DesignRoot;
import com.vaadin.ui.*;
import com.vaadin.ui.declarative.Design;
import life.qbic.portal.sampletracking.components.projectoverview.Projectview;
import life.qbic.portal.sampletracking.components.sampleoverview.SampleView;
import life.qbic.portal.sampletracking.components.toggle.ToggleButton;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Button;

/**
 * !! DO NOT EDIT THIS FILE !!
 * <p>
 * This class is generated by Vaadin Designer and will be overwritten.
 * <p>
 * Please make a subclass with logic and additional interfaces as needed,
 * e.g class LoginView extends LoginDesign implements View { }
 */
@DesignRoot
@AutoGenerated
@SuppressWarnings("serial")
public class MainPage extends VerticalLayout {
    protected HorizontalLayout hotbar;
    protected HorizontalLayout toggleButtonLayout;
    protected Button projectView;
    protected Button sampleView;

    public MainPage(Projectview projectLayout, SampleView sampleLayout) {
        Design.read(this);
        initLayout(projectLayout,sampleLayout);
        listenToProjectSelectionChange();
    }

    private void initLayout(Projectview projectview, SampleView sampleView){
        hotbar.addComponentAsFirst(projectview.ge);
        hotbar.addComponentAsFirst(sampleLayout.getHotbarLayout());

        this.addComponents(projectLayout.);

    }

    private void listenToProjectSelectionChange(){
        projectView.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent clickEvent) {
                showProjectView(true);
                showSampleView(false);
            }
        });
        sampleView.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent clickEvent) {
                showProjectView(false);
                showSampleView(true);
            }
        });
    }

    private void showProjectView(Boolean visible) {
        hotbar.addComponent(projectLayout.getHotbarLayout());
        projectOverviewView.getHotbar().setVisible(visible)
        if (visible) this.titleLabel.value = projectOverviewView.getTitle()
    }

    private void showSampleView(Boolean visible) {
        sampleOverviewView.setVisible(visible)
        sampleOverviewView.getHotbar().setVisible(visible)
        if (visible) this.titleLabel.value = sampleOverviewView.getTitle()
    }

    private void addHotbarItem(HorizontalLayout item) {
        this.hotbar.addComponent(item)
    }


    private void addToggleButtonListeners() {
        def switchToSampleView = {
                showProjectView(false)
                showSampleView(true)
        }
        def switchToProjectView = {
                showSampleView(false)
                showProjectView(true)
        }
        projectSampleToggle.addClickListener(switchToSampleView, ToggleButton.State.ONE)
        projectSampleToggle.addClickListener(switchToProjectView, ToggleButton.State.TWO)

        projectOverviewView.onProjectDoubleClick({
                sampleOverviewController.getSamplesFor(it.code);
                projectSampleToggle.click()
        })
    }

    private static Component createSpacer(float height, Unit unit) {
        Label label = new Label(" ")
        label.setHeight(height, unit)
        return label
    }

    private static ToggleButton setupProjectSampleToggle() {
        ToggleButton toggleButton = new ToggleButton("Show Samples", "Show Projects")
        toggleButton.setEnabled(false)

        return toggleButton
    }
}
